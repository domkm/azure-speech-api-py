# coding: utf-8

"""
    Speech Services API v3.1

    Speech Services API v3.1.  # noqa: E501

    OpenAPI spec version: v3.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DatasetsUploadBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'project': 'str',
        'display_name': 'str',
        'description': 'str',
        'locale': 'str',
        'kind': 'str',
        'custom_properties': 'str',
        'data': 'str',
        'email': 'str'
    }

    attribute_map = {
        'project': 'project',
        'display_name': 'displayName',
        'description': 'description',
        'locale': 'locale',
        'kind': 'kind',
        'custom_properties': 'customProperties',
        'data': 'data',
        'email': 'email'
    }

    def __init__(self, project=None, display_name=None, description=None, locale=None, kind=None, custom_properties=None, data=None, email=None):  # noqa: E501
        """DatasetsUploadBody - a model defined in Swagger"""  # noqa: E501
        self._project = None
        self._display_name = None
        self._description = None
        self._locale = None
        self._kind = None
        self._custom_properties = None
        self._data = None
        self._email = None
        self.discriminator = None
        if project is not None:
            self.project = project
        self.display_name = display_name
        if description is not None:
            self.description = description
        self.locale = locale
        self.kind = kind
        if custom_properties is not None:
            self.custom_properties = custom_properties
        if data is not None:
            self.data = data
        if email is not None:
            self.email = email

    @property
    def project(self):
        """Gets the project of this DatasetsUploadBody.  # noqa: E501

        The optional string representation of the url of a project. If set, the dataset will be associated with that project.  # noqa: E501

        :return: The project of this DatasetsUploadBody.  # noqa: E501
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this DatasetsUploadBody.

        The optional string representation of the url of a project. If set, the dataset will be associated with that project.  # noqa: E501

        :param project: The project of this DatasetsUploadBody.  # noqa: E501
        :type: str
        """

        self._project = project

    @property
    def display_name(self):
        """Gets the display_name of this DatasetsUploadBody.  # noqa: E501

        The name of this dataset (required).  # noqa: E501

        :return: The display_name of this DatasetsUploadBody.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this DatasetsUploadBody.

        The name of this dataset (required).  # noqa: E501

        :param display_name: The display_name of this DatasetsUploadBody.  # noqa: E501
        :type: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")  # noqa: E501

        self._display_name = display_name

    @property
    def description(self):
        """Gets the description of this DatasetsUploadBody.  # noqa: E501

        Optional description of this dataset.  # noqa: E501

        :return: The description of this DatasetsUploadBody.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DatasetsUploadBody.

        Optional description of this dataset.  # noqa: E501

        :param description: The description of this DatasetsUploadBody.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def locale(self):
        """Gets the locale of this DatasetsUploadBody.  # noqa: E501

        The locale of this dataset (required).  # noqa: E501

        :return: The locale of this DatasetsUploadBody.  # noqa: E501
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this DatasetsUploadBody.

        The locale of this dataset (required).  # noqa: E501

        :param locale: The locale of this DatasetsUploadBody.  # noqa: E501
        :type: str
        """
        if locale is None:
            raise ValueError("Invalid value for `locale`, must not be `None`")  # noqa: E501

        self._locale = locale

    @property
    def kind(self):
        """Gets the kind of this DatasetsUploadBody.  # noqa: E501

        The kind of the dataset (required). Possible values are \"Language\", \"Acoustic\", \"Pronunciation\", \"AudioFiles\", \"LanguageMarkdown\".  # noqa: E501

        :return: The kind of this DatasetsUploadBody.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this DatasetsUploadBody.

        The kind of the dataset (required). Possible values are \"Language\", \"Acoustic\", \"Pronunciation\", \"AudioFiles\", \"LanguageMarkdown\".  # noqa: E501

        :param kind: The kind of this DatasetsUploadBody.  # noqa: E501
        :type: str
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")  # noqa: E501

        self._kind = kind

    @property
    def custom_properties(self):
        """Gets the custom_properties of this DatasetsUploadBody.  # noqa: E501

        The optional custom properties of this entity. The maximum allowed key length is 64 characters, the maximum allowed value length is 256 characters and the count of allowed entries is 10.  # noqa: E501

        :return: The custom_properties of this DatasetsUploadBody.  # noqa: E501
        :rtype: str
        """
        return self._custom_properties

    @custom_properties.setter
    def custom_properties(self, custom_properties):
        """Sets the custom_properties of this DatasetsUploadBody.

        The optional custom properties of this entity. The maximum allowed key length is 64 characters, the maximum allowed value length is 256 characters and the count of allowed entries is 10.  # noqa: E501

        :param custom_properties: The custom_properties of this DatasetsUploadBody.  # noqa: E501
        :type: str
        """

        self._custom_properties = custom_properties

    @property
    def data(self):
        """Gets the data of this DatasetsUploadBody.  # noqa: E501

        For acoustic datasets, a zip file containing the audio data and a text file containing the transcriptions for the audio data. For language datasets, a text file containing the language or pronunciation data. Required in both cases.  # noqa: E501

        :return: The data of this DatasetsUploadBody.  # noqa: E501
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this DatasetsUploadBody.

        For acoustic datasets, a zip file containing the audio data and a text file containing the transcriptions for the audio data. For language datasets, a text file containing the language or pronunciation data. Required in both cases.  # noqa: E501

        :param data: The data of this DatasetsUploadBody.  # noqa: E501
        :type: str
        """

        self._data = data

    @property
    def email(self):
        """Gets the email of this DatasetsUploadBody.  # noqa: E501

        An optional string containing the email address to send email notifications to in case the operation completes. The value will be removed after successfully sending the email.  # noqa: E501

        :return: The email of this DatasetsUploadBody.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this DatasetsUploadBody.

        An optional string containing the email address to send email notifications to in case the operation completes. The value will be removed after successfully sending the email.  # noqa: E501

        :param email: The email of this DatasetsUploadBody.  # noqa: E501
        :type: str
        """

        self._email = email

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DatasetsUploadBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DatasetsUploadBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
